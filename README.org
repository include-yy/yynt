#+DATE: [2024-01-01]

* yynt --- a simple Org publish manager

(If you are familiar with Org-mode and have used Org's export and publishing
features, I hope this package can be helpful when needed; otherwise, it might
not be very useful at the moment.)

Just like =ox-publish=, =yynt= is a management tool for exporting Org files to
other types of files (such as HTML, Markdown). It allows for the management of a
series of Org files and their associated resource files by writing publication
configurations. For building a blog, such management tools can help us retain
the original directory structure, generate HTML at the target location, and move
the associated resource files.

** Features

Compared to =ox-publish=, =yynt= has the following advantages:

- Project-local Cache File and More
- More Flexible(Complex) Export Options Configuration
- Able to Describe Simple File Dependencies
- Clear Directory Structure Differentiation

I don't list disadvantages here, but actually =yynt= is not an out-of-the-box
package; you need to write publication rules according to your needs (which
might require hundreds of lines of Elisp :p ).

** Design

When I use Org to write blogs, I want a file that can aggregate information from
other files, such as titles and categories. This requires me to read the
contents of certain files, and this file is special because it may need to be
re-exported due to changes in other files. To avoid repeatedly reading files, I
can store certain information when exporting regular files and use this
information when exporting special files. Additionally, I can ensure that
special files are also exported after regular files to keep the information up
to date.

To achieve the above goals, I implemented a caching function based on Emacs
SQLite support. It records the export time, publication time, file path, and
keyword strings from the file header when exporting regular files. These
timestamps can be used for incremental updates during export or publication, and
the keyword information can be used for the export of special files without
multiple file reads. Users can set the keywords that need to be read.

I divide files into regular files and ex files. The former are exported earlier
in the process, and the latter can utilize the information in the database from
the former. Regular files in one project can become dependencies for ex files in
another project. When multiple projects are exported simultaneously, I ensure
that ex files are always exported later than all regular files.

Instead of placing blog files in a folder and then centrally placing resources
(such as images, videos, code files, etc.) in another folder, I prefer to
prepare a folder for each blog, placing the Org file and its associated resource
files in the folder. I have different project types for different directory
structures: 0 represents a single file, 1 represents a single-layer directory,
and 2 represents a two-layer directory. Compared to recursively searching for
export files like =ox-publish=, clearly distinguishing between different
directory structures may be clearer.

** Installation

You can it using =package-vc= (require Emacs 29.1 or above):

#+begin_src text
M-x package-vc-install https://github.com/include-yy/yynt RET
#+end_src

After installation, add =(require 'yynt)= to your init file or somewhere using
functions from yynt.el.

** Usage

My blog build script [[https://github.com/include-yy/egh0bww1/blob/master/yy.el][yy.el]] provides an example of using yynt.

*** Create Project

In =yynt=, a project can be compared to a =:components= project in
=ox-publish=. It consists of one or more build objects. We can use
=yynt-create-project= to create a project object. =yynt-create-project= has the
following parameters:

#+begin_src elisp
  (defun yynt-create-project (name pubdir cache cache-items &optional directory) ...)
#+end_src

- =NAME=: Project name symbol
  - Project names cannot be =t=, =nil=, or keywords.
- =PUBDIR=: Publish directory
  - If it's a relative path, it is relative to the project's root directory.
- =CACHE=: Cache file name
  - If it's a relative path, it is relative to the project's directory. If it is
    =nil=, it means the project does not use a cache.
- =CACHE-ITEMS=: List of keywords
  - A list of keywords collected from the beginning of Org files during export
    and publishing processes.
- =DIRECTORY=: Project root directory
  - If omitted, it defaults to the current directory at the time of the call.

When calling =yynt-create-project=, it will create and return a =yynt-project=
object. If =CACHE= is not =nil=, it will create and initialize a database file
if not exists. The created project will be stored in the =yynt-project-list=
list, and users can use the command =yynt-choose-project= to set the current
project. We can use =yynt-create-build= to create build objects belonging to the
project.

If a project object with the same name already exists in =yynt-project-list=,
=yynt-create-project= will replace the old object with the new one.

Here is a simple example of creating a project object:

#+begin_src elisp
  (yynt-create-project
   'egh0bww1
   "blog-build" "build.sqlite3"
   '("title" "filetags" "description" "date" "tmp"))
#+end_src

*** Create Build Object

We can use =yynt-create-build= to create build objects attached to the
project. This function has quite complex parameters(wow, 16 arguments):

#+begin_src elisp
  (cl-defun yynt-create-build (&key project path type collect info collect-ex
  				  info-ex fn attrs no-cache-files ext-files
  				  published convert-fn included-resources
  				  collect-2 excluded-fn-2)
    ...)
#+end_src

- =:project=, project object to which the build object belongs
- =:path=, location of the build object, relative to the project's root directory
- =:type=, type of build object, can be the numbers 0, 1, or 2
- =:collect=, function that returns a list of files to be exported

  =:collect= accepts a function that takes a build object as a parameter and
  returns a list of absolute paths of the files to be exported, i.e.,
  ~(bobj) => (list of abs-path)~. Here is a very simple example:
  #+begin_src elisp
    (lambda (bobj)
      (mapcar (lambda (x) (file-name-concat (yynt-build--path bobj) x))
    	  '("1.org" "2.org" "3.org")))
  #+end_src
  =yynt= provides several helper functions to get the list of files: =yynt-p1=,
  =yynt-p1s=, and =yynt-p2=. =yynt-p1= accepts a regex and returns a function
  that finds files matching the regex in the directory of the build
  object. =yynt-p1s= accepts a list of file and returns a function that expands
  the file paths to absolute paths using the build object's path:
  #+begin_src elisp
    :collect (yynt-p1 "^[0-9]+\\.org")
    :collect-ex (yynt-p1s '("index.org" "tags.org"))
  #+end_src
  =yynt-p2= is mainly used for type 2 build objects. It accepts two regex
  strings as parameters: the first one matches subdirectories in the build
  object's directory, and the second one matches files to be exported in those
  subdirectories. It returns a function object that can be used as
  =:collect=. Here is an example of its usage:
  #+begin_src elisp
    :collect (yynt-p2 "^2" "\\.\\(htm\\|org\\)$")
  #+end_src
  For type 0 build object, the export files can be determined solely by =:path=.
  =:collect= has no effect.
- =:info=, =plist= of options in Org export

  This list is used to specify options for exporting the files obtained by
  =:collect=. Specific options can be referenced from [[https://orgmode.org/manual/Publishing-options.html][Options for the exporters]]
  or the options provided by the specific backend in use. Here is a simple
  example:
  #+begin_src elisp
    :info '( :with-sub-superscript {} ; #+options: ^:{}
             :html-head-include-default-style nil ; #+options: html-style:nil
             )
  #+end_src
- =:collect-ex=, similar to =:collect=, but used to get ex files

  In design, =:collect= is used to obtain regular files to be exported, whereas
  =:collect-ex= is used to obtain special files to be exported. These special
  files may need to generate content based on the information from the regular
  files (such as titles, tags, and other metadata).

  For type 0 build object, =:collect-ex= has no effect.
- =:info-ex=, extra options used for ex files

  When exporting, =:info-ex= will be merged with =:info= and applied to the
  files from =:collect-ex=. =:info-ex= has higher priority.

  For type 0 build object, =:info-ex= does not take effect; for type 2 build
  object, =:info= is used for files within the second-level directory, while
  =:info-ex= is used for files within the first-level directory.

- =:fn=, export function

  =:fn= accepts a function that has three parameters: export options =plist=,
  the absolute path of the input file =in=, and the absolute path of the output
  file =out=. This function will export the current buffer and output the result
  to the specified output file path. If the function does not raise an error,
  the export is considered successful.

  Org's various export backends define export functions. We can call the unified
  export function =org-export-to-file=, which will export the current buffer and
  save it to the specified file. Below is an example of calling
  =org-export-to-file= and a sample function that can be used as the =:fn=
  parameter:
  #+begin_src elisp
    (org-export-to-file 'html "index.html"
      nil nil nil nil plist)

    (defun yynt/yy-fn (plist in out)
      (if (string-match-p "\\.org$" in)
          (let ((default-directory (file-name-directory in))
    	    (org-export-coding-system org-w3ctr-coding-system)
    	    (org-export-use-babel org-w3ctr-use-babel))
    	(org-export-to-file 'w3ctr out
    	  nil nil nil nil plist))
        t))
  #+end_src
- =:attrs=, list of keywords to be extracted from the files during export

  During export, =yynt= collects keyword information from the beginning of Org
  files. The specific keywords selected are related to the project's
  =CACHE-ITEMS= members, such as =title=, =filetags=, =description=, =date=,
  etc. We can specify the required keywords through =:attrs=; these keywords
  must be part of the project's =CACHE-ITEMS=. Here is an example of a blog
  header:
  #+begin_src org
    ,#+TITLE: 对 Org 导出管理工具 yynt 的介绍与实现注解
    ,#+DATE: [2024-12-08 Sun 20:48]
    ,#+FILETAGS: elisp
    ,#+DESCRIPTION: 本文介绍了我实现的 Org 导出管理工具
  #+end_src
- =:no-cache-files=, list of files not to be exported, relative to the build
  object's root directory

  We can specify files that do not need to be cached using
  =:no-cache-files=. This means the export and publication information for these
  files will not be recorded in the database, and the database will not store
  any related information, including =:attrs=.

  Generally, this option is only used for files from =:collect-ex=. For type 0
  build objects, setting this option to =t= means the files will not be cached.
- =:ext-files=, external files that the build object depends on, relative to the
  project object's root directory

  =:ext-files= can specify files outside the build object that depend on the
  object's content. When a build object is exported or published, its external
  files will also be exported or published, but other files in build objects
  that contain these external files are not included.

  When a file relies on information from another build object (such as metadata
  in a database), this parameter allows the file to be automatically updated and
  exported or published when the other build object is updated.
- =:published=, whether the build object is published, non-nil means published
- =:convert-fn=, function that converts input file path to output file path

  Here is a possible implementation:
  #+begin_src elisp
    (defun yynt/yy-convert-fn (file)
      (if (string= "org" (file-name-extension file))
          (file-name-with-extension file "html")
        file))
  #+end_src
- =:included-resources=, resources included in the build object

  This parameter specifies the list of resources included in the build
  object. The files or directories in the list are relative to the root
  directory of the build object.
- =:collect-2=, function that returns a list of absolute paths of the
  subdirectories to be exported in the build object

  This function is primarily used for the publication of type 2 build objects;
  type 0 and type 1 build objects will not use them. =:collect-2= accepts a
  function that takes the build object as a parameter and returns a list of
  absolute paths of all the subdirectories to be exported in a type 2 build
  object. =yynt= provides =yynt-c2= for this purpose, which accepts a regex and
  returns a function that matches the subdirectories in the root directory of
  the build object.

  #+begin_src elisp
  :collect-2 (yynt-c2 "^2")
  #+end_src
- =:excluded-fn-2=, function that takes build object =bobj= and a subdirectory
  =sd= of =bobj= as parameter and returns a predicate function to determine
  whether the files and folders in =sd= should be excluded during publication

  The subdirectory parameter for this function is the path relative to the root
  directory of the build object. The predicate function accepts the path of a
  file relative to the subdirectory as its parameter. If the function returns =t=,
  it means the file should be excluded during publication; otherwise, it should
  be moved to the publication location. Here is an explanatory example:
  #+begin_src elisp
    (lambda (_bobj subdir)
      (cond
       ;; in subdirectory path1
       ((string= subdir path1)
        ;; pred that exclude all org file
        (lambda (filename)
          (string-match-p "\\.org$" filename)))
       ((string= subdir path2)
        ;; pred that exclude all png file
        (lambda (filename)
          (string-match-p "\\.png" filename)))
       ((string= subdir path2) pred2)
       ...
       ;; exclude no file
       (t (lambda (_f) nil))))
  #+end_src
  In short, =:excluded-fn-2= can be used to determine which files in the
  subdirectories of a type 2 project should not be published. =yynt= provides a
  helper function =yynt-e2=, which accepts a regex. The function it generates will
  exclude all files in subdirectories that match the regex conditions.

  #+begin_src elisp
    :excluded-fn-2 (yynt-e2 "\\(dev\\)\\|\\(\\.org$\\)")
  #+end_src

Here are some examples from my configuration:

#+begin_src elisp
  ;; type 0
  (yynt-create-build
   :project yynt/yy-project
   :path "index.org" :type 0
   :collect-ex t
   :fn #'yynt/yy-fn
   :no-cache-files t
   :published t
   :convert-fn #'yynt/yy-convert-fn
   :included-resources '("assets")
   :info (yynt-combine-plists
  	yynt/yy-common-plist
  	'( :section-numbers nil
  	   :html-preamble nil
  	   :html-zeroth-section-tocname nil)))
  ;; type 1
  (yynt-create-build
   :project yynt/yy-project
   :path "projecteuler" :type 1
   :collect (yynt-p1 "^[0-9]+\\.org")
   :collect-ex (yynt-p1s '("index.org"))
   :fn #'yynt/yy-fn
   :attrs '("description" "filetags" "date")
   :no-cache-files '("index.org")
   :published t
   :convert-fn #'yynt/yy-convert-fn
   :included-resources '("res")
   :info (yynt-combine-plists
  	yynt/yy-common-plist
  	'( :html-zeroth-section-tocname nil
  	   :author "include-yy"
  	   :html-link-left "../index.html"
  	   :html-link-lname "HOME"
  	   :html-link-right "./index.html"
  	   :html-link-rname "SUM"))
   :info-ex '( :html-link-lname "HOME"
  	     :html-link-left "../index.html"
  	     :html-link-right ""
  	     :html-link-rname ""
  	     ))
  ;; type 2
  (yynt-create-build
   :project yynt/yy-project
   :path "posts" :type 2
   :collect (yynt-p2 "^2" "\\.\\(htm\\|org\\)$")
   :collect-ex (yynt-p1s '("index.org" "tags.org"))
   :fn #'yynt/yy-fn
   :no-cache-files '("index.org" "tags.org")
   :ext-files '("index.org" "rss.xml")
   :attrs '("title" "filetags" "description")
   :published t
   :convert-fn #'yynt/yy-convert-fn
   :collect-2 (yynt-c2 "^2")
   :excluded-fn-2 (yynt-e2 "\\(dev\\)\\|\\(\\.org$\\)")
   :info (yynt-combine-plists
  	yynt/yy-common-plist
  	'(:author "include-yy"))
   :info-ex '( :html-preamble nil
  	     :section-numbers nil
  	     :html-zeroth-section-tocname nil))
#+end_src

*** Export and Publish

When we want to preview the current progress after completing a blog or during
the writing process, we can use the =yynt-export-file= command in the buffer
where the blog is located. This will export the file of the current buffer and
update the necessary special files and external files. If we want to export a
build object, we can use the =yynt-export-build= command, which will pop up a
minibuffer to let us choose the build object based on =yynt-current-project=
(=*t*= is special and represents building all objects in the project). If we
only want to build the current file, we can use =yynt-export-current-buffer=,
which does not consider any dependencies.

When we want to publish a blog, the =yynt-publish-file= command can publish the
current file and the files that depend on it, such as affiliated resources, ex
files, and external files, considering the dependencies. We can use
=yynt-publish-build= to publish a specific build object. Because =yynt= caches
timestamps and other information, export and publish operations are incremental.

During export, =yynt= first exports the regular files of each project, then the
ex files, and finally the external files. This ensures that when ex or external
files obtain database information, the database is up-to-date.

=yynt= outputs log information to the =*yynt*= buffer during export and
publication, and we can view its output using the =yynt-logger= command.

*** Using the Database

** API list
